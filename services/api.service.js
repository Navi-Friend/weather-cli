import { getKeyValue } from "./storage.service.js";
import axios from "axios";

const getToken = async () => {
    const token = process.env.TOKEN ?? (await getKeyValue("token"));
    if (!token.length) {
        throw new Error(
            "–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -t [API_KEY]"
        );
    }
    return token;
};

export const getIcon = (icon) => {
    const weatherIcons = {
        '01': '‚òÄÔ∏è',  // clear sky (day)
        '01': 'üåô',  // clear sky (night)
        '02': 'üå§Ô∏è',  // few clouds (day)
        '02': 'üå•Ô∏è',  // few clouds (night)
        '03': '‚òÅÔ∏è',  // scattered clouds
        '04': '‚òÅÔ∏è',  // broken clouds
        '09': 'üåßÔ∏è',  // shower rain
        '10': 'üå¶Ô∏è',  // rain (day)
        '10': 'üåßÔ∏è',  // rain (night)
        '11': 'üå©Ô∏è',  // thunderstorm
        '13': '‚ùÑÔ∏è',  // snow
        '50': 'üå´Ô∏è'   // mist
    };
    return weatherIcons[icon.slice(0, -1)]
}

export const getWeather = async (city) => {
    const token = await getToken();
    const [lat, lon] = await getLatLon(city);
    const weather = await axios.get(
        "https://api.openweathermap.org/data/2.5/weather",
        {
            params: {
                lat,
                lon,
                appid: token,
                lang: "ru",
                units: "metric",
            },
        }
    );
    return weather.data;
};

const getLatLon = async (city) => {
    const token = await getToken();
    const { data } = await axios.get(
        "https://api.openweathermap.org/geo/1.0/direct",
        { params: { q: city, limit: 1, appid: token } }
    );

    return [data[0].lat, data[0].lon];
};

// const handleAxiosError = (error) => {
//     if (error.response) {
//         // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π
//         // –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 2xx
//         console.log(error.response.data);
//         console.log(error.response.status);
//         console.log(error.response.headers);
//     } else if (error.request) {
//         // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
//         // `error.request`- —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä XMLHttpRequest –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä
//         // http.ClientRequest –≤ node.js
//         console.log(error.request);
//     } else {
//         // –ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É
//         console.log("Error", error.message);
//     }
// };
